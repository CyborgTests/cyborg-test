{"version":3,"file":"index.umd.js","sources":["../src/test.ts"],"sourcesContent":["import {\n  Browser,\n  BrowserContext,\n  Page,\n  test as pwTest,\n} from \"@playwright/test\";\nimport { chromium } from \"playwright\";\n\nclass TestFailedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"TestFailedError\";\n  }\n}\n\nconst test = pwTest.extend<{\n  testControl: {\n    page: Page;\n    browser: Browser;\n    context: BrowserContext;\n  };\n  manualStep: (stepName: string) => Promise<void>;\n}>({\n  testControl: async ({ page, context, browser }, use) => {\n    const tcBrowser = await chromium.launch({\n      headless: false,\n    });\n\n    const tcPage = await tcBrowser.newPage({\n      viewport: { width: 500, height: 700 },\n    });\n\n    await tcPage.goto(\"file://\" + process.cwd() + \"/node_modules/@cyborgtests/test/app-build/index.html\");\n    await tcPage.bringToFront();\n\n    await use({\n      browser: tcBrowser,\n      context: tcPage.context(),\n      page: tcPage,\n    });\n    await tcPage.close();\n    await tcPage.context().close();\n    await tcBrowser.close();\n  },\n  manualStep: async ({ testControl, page, browser, context }, use) => {\n    const manualStep = async (stepName: string) =>\n      await test.step(\n        stepName,\n        async () => {\n          await testControl.page.evaluate((_testName) => {\n            (window as any)?.testUtils?.setTestName(_testName);\n          }, test.info().title);\n\n          // Write current step name\n          await testControl.page.evaluate((_stepName) => {\n            (window as any)?.testUtils?.addStep(_stepName);\n          }, stepName);\n\n          // Pause for manual step\n\n          await testControl.page.pause();\n\n          const lastStep = await testControl.page\n            .locator(\"#stepsList li:last-of-type\")\n            .textContent();\n\n          // If last step failed, throw error\n          if (lastStep!.includes(\"‚ùå\")) {\n            throw new TestFailedError(lastStep as string);\n          }\n        },\n        { box: true }\n      );\n    await use(manualStep);\n    // In case test interupted\n    try {\n      await testControl.page.evaluate(\"playwright.resume()\");\n    } catch (err) {\n      // no-op\n    }\n  },\n});\n\nexport default test;\n"],"names":["TestFailedError","message","test","pwTest","page","context","browser","use","tcBrowser","chromium","tcPage","testControl","stepName","_testName","_a","_stepName","lastStep"],"mappings":"wVAQA,MAAMA,UAAwB,KAAM,CAClC,YAAYC,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,KAAO,iBAAA,CAEhB,CAEM,MAAAC,EAAOC,OAAO,OAOjB,CACD,YAAa,MAAO,CAAE,KAAAC,EAAM,QAAAC,EAAS,QAAAC,CAAA,EAAWC,IAAQ,CAChD,MAAAC,EAAY,MAAMC,EAAA,SAAS,OAAO,CACtC,SAAU,EAAA,CACX,EAEKC,EAAS,MAAMF,EAAU,QAAQ,CACrC,SAAU,CAAE,MAAO,IAAK,OAAQ,GAAI,CAAA,CACrC,EAED,MAAME,EAAO,KAAK,UAAY,QAAQ,MAAQ,sDAAsD,EACpG,MAAMA,EAAO,aAAa,EAE1B,MAAMH,EAAI,CACR,QAASC,EACT,QAASE,EAAO,QAAQ,EACxB,KAAMA,CAAA,CACP,EACD,MAAMA,EAAO,MAAM,EACb,MAAAA,EAAO,QAAQ,EAAE,MAAM,EAC7B,MAAMF,EAAU,MAAM,CACxB,EACA,WAAY,MAAO,CAAE,YAAAG,EAAa,KAAAP,EAAM,QAAAE,EAAS,QAAAD,GAAWE,IAAQ,CA6BlE,MAAMA,EA5Ba,MAAOK,GACxB,MAAMV,EAAK,KACTU,EACA,SAAY,CACV,MAAMD,EAAY,KAAK,SAAUE,GAAc,QAC5CC,EAAA,2BAAgB,YAAhB,MAAAA,EAA2B,YAAYD,EAAS,EAChDX,EAAK,KAAK,EAAE,KAAK,EAGpB,MAAMS,EAAY,KAAK,SAAUI,GAAc,QAC5CD,EAAA,2BAAgB,YAAhB,MAAAA,EAA2B,QAAQC,IACnCH,CAAQ,EAIL,MAAAD,EAAY,KAAK,MAAM,EAE7B,MAAMK,EAAW,MAAML,EAAY,KAChC,QAAQ,4BAA4B,EACpC,YAAY,EAGX,GAAAK,EAAU,SAAS,GAAG,EAClB,MAAA,IAAIhB,EAAgBgB,CAAkB,CAEhD,EACA,CAAE,IAAK,EAAK,CACd,CACkB,EAEhB,GAAA,CACI,MAAAL,EAAY,KAAK,SAAS,qBAAqB,OACzC,CAAA,CAEd,CAEJ,CAAC"}