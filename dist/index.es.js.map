{"version":3,"file":"index.es.js","sources":["../src/test.ts"],"sourcesContent":["import {\n  Browser,\n  BrowserContext,\n  Page,\n  test as pwTest,\n} from \"@playwright/test\";\nimport { chromium } from \"playwright\";\nimport { mountUI } from './ui';\n\nclass TestFailedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"TestFailedError\";\n  }\n}\n\nconst test = pwTest.extend<{\n  testControl: {\n    page: Page;\n    browser: Browser;\n    context: BrowserContext;\n  };\n  manualStep: (stepName: string) => Promise<void>;\n}>({\n  testControl: async ({ page, context, browser }, use) => {\n    const tcBrowser = await chromium.launch({\n      headless: false,\n    });\n\n    const tcPage = await tcBrowser.newPage({\n      viewport: { width: 500, height: 700 },\n    });\n\n    await tcPage.goto(\"file://\" + process.cwd() + \"/node_modules/@cyborgtests/test/app-build/index.html\");\n    await tcPage.bringToFront();\n\n    await use({\n      browser: tcBrowser,\n      context: tcPage.context(),\n      page: tcPage,\n    });\n    await tcPage.close();\n    await tcPage.context().close();\n    await tcBrowser.close();\n  },\n  manualStep: async ({ testControl, page, browser, context }, use) => {\n    const manualStep = async (stepName: string) =>\n      await test.step(\n        stepName,\n        async () => {\n          await testControl.page.evaluate((_testName) => {\n            (window as any)?.testUtils?.setTestName(_testName);\n          }, test.info().title);\n\n          // Write current step name\n          await testControl.page.evaluate((_stepName) => {\n            (window as any)?.testUtils?.addStep(_stepName);\n          }, stepName);\n\n          // Pause for manual step\n          console.log('pause', 'pause')\n          await testControl.page.pause();\n\n          const lastStep = await testControl.page\n            .locator(\"#stepsList li:last-of-type\")\n            .textContent();\n          console.log('lastStep', lastStep)\n          // If last step failed, throw error\n          if (lastStep!.includes(\"‚ùå\")) {\n            throw new TestFailedError(lastStep as string);\n          }\n        },\n        { box: true }\n      );\n    await use(manualStep);\n    // In case test interupted\n    try {\n      await testControl.page.evaluate(\"playwright.resume()\");\n    } catch (err) {\n      // no-op\n    }\n  },\n});\n\nexport default test;\n"],"names":["TestFailedError","message","test","pwTest","page","context","browser","use","tcBrowser","chromium","tcPage","testControl","stepName","_testName","_a","_stepName","lastStep"],"mappings":";;AASA,MAAMA,UAAwB,MAAM;AAAA,EAClC,YAAYC,GAAiB;AAC3B,UAAMA,CAAO,GACb,KAAK,OAAO;AAAA,EAAA;AAEhB;AAEM,MAAAC,IAAOC,EAAO,OAOjB;AAAA,EACD,aAAa,OAAO,EAAE,MAAAC,GAAM,SAAAC,GAAS,SAAAC,EAAA,GAAWC,MAAQ;AAChD,UAAAC,IAAY,MAAMC,EAAS,OAAO;AAAA,MACtC,UAAU;AAAA,IAAA,CACX,GAEKC,IAAS,MAAMF,EAAU,QAAQ;AAAA,MACrC,UAAU,EAAE,OAAO,KAAK,QAAQ,IAAI;AAAA,IAAA,CACrC;AAED,UAAME,EAAO,KAAK,YAAY,QAAQ,QAAQ,sDAAsD,GACpG,MAAMA,EAAO,aAAa,GAE1B,MAAMH,EAAI;AAAA,MACR,SAASC;AAAA,MACT,SAASE,EAAO,QAAQ;AAAA,MACxB,MAAMA;AAAA,IAAA,CACP,GACD,MAAMA,EAAO,MAAM,GACb,MAAAA,EAAO,QAAQ,EAAE,MAAM,GAC7B,MAAMF,EAAU,MAAM;AAAA,EACxB;AAAA,EACA,YAAY,OAAO,EAAE,aAAAG,GAAa,MAAAP,GAAM,SAAAE,GAAS,SAAAD,KAAWE,MAAQ;AA6BlE,UAAMA,EA5Ba,OAAOK,MACxB,MAAMV,EAAK;AAAA,MACTU;AAAA,MACA,YAAY;AACV,cAAMD,EAAY,KAAK,SAAS,CAACE,MAAc;;AAC5C,WAAAC,IAAA,iCAAgB,cAAhB,QAAAA,EAA2B,YAAYD;AAAA,QAAS,GAChDX,EAAK,KAAK,EAAE,KAAK,GAGpB,MAAMS,EAAY,KAAK,SAAS,CAACI,MAAc;;AAC5C,WAAAD,IAAA,iCAAgB,cAAhB,QAAAA,EAA2B,QAAQC;AAAA,WACnCH,CAAQ,GAGH,QAAA,IAAI,SAAS,OAAO,GACtB,MAAAD,EAAY,KAAK,MAAM;AAE7B,cAAMK,IAAW,MAAML,EAAY,KAChC,QAAQ,4BAA4B,EACpC,YAAY;AAGX,YAFI,QAAA,IAAI,YAAYK,CAAQ,GAE5BA,EAAU,SAAS,GAAG;AAClB,gBAAA,IAAIhB,EAAgBgB,CAAkB;AAAA,MAEhD;AAAA,MACA,EAAE,KAAK,GAAK;AAAA,IACd,CACkB;AAEhB,QAAA;AACI,YAAAL,EAAY,KAAK,SAAS,qBAAqB;AAAA,YACzC;AAAA,IAAA;AAAA,EAEd;AAEJ,CAAC;"}